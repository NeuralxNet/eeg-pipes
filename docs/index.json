[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/constants/index.js",
    "content": "export const CHANNELS = 4;\nexport const SAMPLE_RATE = 250;\nexport const ORDER = 2;\nexport const NOTCH_BW = 0.5;\nexport const CHARACTERISTIC = \"butterworth\";\nexport const GAIN = 0;\nexport const PREGAIN = false;\nexport const FFT_BINS = 256;\nexport const DATA_PROP = \"data\";\nexport const USE_LOG = false;\nexport const FREQUENCY_BANDS = {\n  delta: [0.1, 4],\n  theta: [4, 7.5],\n  alpha: [7.5, 12.5],\n  beta: [12.5, 30],\n  gamma: [30, 100]\n};\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/constants/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "CHANNELS",
    "memberof": "src/constants/index.js",
    "static": true,
    "longname": "src/constants/index.js~CHANNELS",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/constants/index.js",
    "importStyle": "{CHANNELS}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "SAMPLE_RATE",
    "memberof": "src/constants/index.js",
    "static": true,
    "longname": "src/constants/index.js~SAMPLE_RATE",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/constants/index.js",
    "importStyle": "{SAMPLE_RATE}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "ORDER",
    "memberof": "src/constants/index.js",
    "static": true,
    "longname": "src/constants/index.js~ORDER",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/constants/index.js",
    "importStyle": "{ORDER}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "NOTCH_BW",
    "memberof": "src/constants/index.js",
    "static": true,
    "longname": "src/constants/index.js~NOTCH_BW",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/constants/index.js",
    "importStyle": "{NOTCH_BW}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "CHARACTERISTIC",
    "memberof": "src/constants/index.js",
    "static": true,
    "longname": "src/constants/index.js~CHARACTERISTIC",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/constants/index.js",
    "importStyle": "{CHARACTERISTIC}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "GAIN",
    "memberof": "src/constants/index.js",
    "static": true,
    "longname": "src/constants/index.js~GAIN",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/constants/index.js",
    "importStyle": "{GAIN}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "PREGAIN",
    "memberof": "src/constants/index.js",
    "static": true,
    "longname": "src/constants/index.js~PREGAIN",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/constants/index.js",
    "importStyle": "{PREGAIN}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "FFT_BINS",
    "memberof": "src/constants/index.js",
    "static": true,
    "longname": "src/constants/index.js~FFT_BINS",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/constants/index.js",
    "importStyle": "{FFT_BINS}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "DATA_PROP",
    "memberof": "src/constants/index.js",
    "static": true,
    "longname": "src/constants/index.js~DATA_PROP",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/constants/index.js",
    "importStyle": "{DATA_PROP}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "USE_LOG",
    "memberof": "src/constants/index.js",
    "static": true,
    "longname": "src/constants/index.js~USE_LOG",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/constants/index.js",
    "importStyle": "{USE_LOG}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "FREQUENCY_BANDS",
    "memberof": "src/constants/index.js",
    "static": true,
    "longname": "src/constants/index.js~FREQUENCY_BANDS",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/constants/index.js",
    "importStyle": "{FREQUENCY_BANDS}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{\"delta\": *, \"theta\": *, \"alpha\": *, \"beta\": *, \"gamma\": *}"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "src/index.js",
    "content": "export * from \"./pipes\";\nexport * from \"./utils\";\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "src/pipes/filtering/bandpassFilter.js",
    "content": "import { CalcCascades, IirFilter } from \"fili\";\nimport { map } from \"rxjs/operators\";\nimport { createPipe } from \"../../utils/createPipe\";\nimport {\n  SAMPLE_RATE as defaultSamplingRate,\n  ORDER as defaultOrder,\n  CHARACTERISTIC as defaultCharacteristic\n} from \"../../constants\";\n\nconst createHighpassIIR = options => {\n  const calc = new CalcCascades();\n  const coeffs = calc.highpass({\n    ...options,\n    Fc: options.cutoffFrequencies[0]\n  });\n  return new IirFilter(coeffs, true);\n};\n\nconst createLowpassIIR = options => {\n  const calc = new CalcCascades();\n  const coeffs = calc.lowpass({ ...options, Fc: options.cutoffFrequencies[1] });\n  return new IirFilter(coeffs, true);\n};\n\nconst interpolate = (before, after) => {\n  if (!isNaN(before)) {\n    if (!isNaN(after)) {\n      return (before + after) / 2;\n    }\n    return before;\n  }\n  if (!isNaN(after)) {\n    return after;\n  }\n  return 0;\n};\n\n/**\n * Applies a bandpass filter to EEG Data. Can be applied to both raw or epoched data\n * @method bandpassFilter\n * @example eeg$\n  .pipe(bandpassFilter({ cutoffFrequencies: [2, 50], nbChannels: 4 }))\n * @param {Object} options - Filter options\n * @param {number} options.nbChannels Number of channels\n * @param {Array<number>} [options.cutoffFrequencies=[2,50]] Low and high cutoff frequencies in Hz\n * @param {number} [options.samplingRate=250] Sampling rate of the EEG device\n * @param {String} [options.characteristic='butterworth'] Filter characteristic. Options are 'bessel' and 'butterworth'\n * @param {number} [options.order=2] The number of 2nd order biquad filters applied to the signal\n * \n * @returns {Observable<Sample | Epoch>}\n */\nexport const bandpassFilter = ({\n  nbChannels,\n  order = defaultOrder,\n  characteristic = defaultCharacteristic,\n  cutoffFrequencies = [2, 50],\n  samplingRate = defaultSamplingRate,\n  Fs = samplingRate,\n  BW = 1\n} = {}) => source => {\n  if (!nbChannels) {\n    throw new Error(\"Please supply nbChannels parameter\");\n  }\n  const options = {\n    order,\n    characteristic,\n    cutoffFrequencies,\n    Fs,\n    BW\n  };\n  const bandpassArray = new Array(nbChannels).fill(0).map(() => ({\n    high: createHighpassIIR(options),\n    low: createLowpassIIR(options)\n  }));\n  return createPipe(\n    source,\n    map(eegObject => {\n      const isEpoch = Array.isArray(eegObject.data[0]);\n      return {\n        ...eegObject,\n        data: eegObject.data.map((channel, index) => {\n          if (isEpoch) {\n            const nans = [];\n            const safeChannel = channel.map((sample, sampleIndex) => {\n              if (isNaN(sample)) {\n                nans.push(sampleIndex);\n                const interpolation = interpolate(\n                  channel[sampleIndex - 1],\n                  channel[sampleIndex + 1]\n                );\n                return interpolation;\n              }\n              return sample;\n            });\n\n            // Then, perform filter\n            const filteredData = bandpassArray[index].low.multiStep(\n              bandpassArray[index].high.multiStep(safeChannel)\n            );\n\n            // Afterwards, reinsert NaNs\n            if (nans.length > 0) {\n              nans.forEach(nan => {\n                filteredData[nan] = NaN;\n              });\n            }\n            return filteredData;\n          }\n          // If Sample, only filter if not NaN\n          if (!isNaN(channel)) {\n            return bandpassArray[index].low.singleStep(\n              bandpassArray[index].high.singleStep(channel)\n            );\n          }\n          return channel;\n        })\n      };\n    })\n  );\n};\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/filtering/bandpassFilter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "createHighpassIIR",
    "memberof": "src/pipes/filtering/bandpassFilter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/filtering/bandpassFilter.js~createHighpassIIR",
    "access": "public",
    "export": false,
    "importPath": "eeg-pipes/src/pipes/filtering/bandpassFilter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "createLowpassIIR",
    "memberof": "src/pipes/filtering/bandpassFilter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/filtering/bandpassFilter.js~createLowpassIIR",
    "access": "public",
    "export": false,
    "importPath": "eeg-pipes/src/pipes/filtering/bandpassFilter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "interpolate",
    "memberof": "src/pipes/filtering/bandpassFilter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/filtering/bandpassFilter.js~interpolate",
    "access": "public",
    "export": false,
    "importPath": "eeg-pipes/src/pipes/filtering/bandpassFilter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "before",
        "types": [
          "*"
        ]
      },
      {
        "name": "after",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "bandpassFilter",
    "memberof": "src/pipes/filtering/bandpassFilter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/filtering/bandpassFilter.js~bandpassFilter",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/pipes/filtering/bandpassFilter.js",
    "importStyle": "{bandpassFilter}",
    "description": "Applies a bandpass filter to EEG Data. Can be applied to both raw or epoched data",
    "examples": [
      "eeg$\n.pipe(bandpassFilter({ cutoffFrequencies: [2, 50], nbChannels: 4 }))"
    ],
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "bandpassFilter"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Observable<Sample | Epoch>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Filter options"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.nbChannels",
        "description": "Number of channels"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[2,50]",
        "defaultRaw": [
          2,
          50
        ],
        "name": "options.cutoffFrequencies",
        "description": "Low and high cutoff frequencies in Hz"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "250",
        "defaultRaw": 250,
        "name": "options.samplingRate",
        "description": "Sampling rate of the EEG device"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'butterworth'",
        "defaultRaw": "'butterworth'",
        "name": "options.characteristic",
        "description": "Filter characteristic. Options are 'bessel' and 'butterworth'"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "options.order",
        "description": "The number of 2nd order biquad filters applied to the signal"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable<Sample | Epoch>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/pipes/filtering/highpassFilter.js",
    "content": "import { CalcCascades, IirFilter } from \"fili\";\nimport { map } from \"rxjs/operators\";\nimport { createPipe } from \"../../utils/createPipe\";\nimport {\n  SAMPLE_RATE as defaultSamplingRate,\n  ORDER as defaultOrder,\n  CHARACTERISTIC as defaultCharacteristic\n} from \"../../constants\";\n\nconst createHighpassIIR = options => {\n  const calc = new CalcCascades();\n  const coeffs = calc.highpass(options);\n  return new IirFilter(coeffs);\n};\n\nconst interpolate = (before, after) => {\n  if (!isNaN(before)) {\n    if (!isNaN(after)) {\n      return (before + after) / 2;\n    }\n    return before;\n  }\n  if (!isNaN(after)) {\n    return after;\n  }\n  return 0;\n};\n\n/**\n * Applies a highpass filter to EEG Data. Can be applied to both raw or epoched data\n * @method highpassFilter\n * @example eeg$\n  .pipe(highpassFilter({ cutoffFrequency: 2, nbChannels: 4 }))\n * @param {Object} options - Filter options\n * @param {number} options.nbChannels Number of channels\n * @param {number} [options.cutoffFrequency=2] Cutoff frequency in Hz\n * @param {number} [options.samplingRate=250] Sampling rate of the EEG device\n * @param {String} [options.characteristic='butterworth'] Filter characteristic. Options are 'bessel' and 'butterworth'\n * @param {number} [options.order=2] The number of 2nd order biquad filters applied to the signal\n * \n * @returns {Observable<Sample | Epoch>}\n */\nexport const highpassFilter = ({\n  nbChannels,\n  order = defaultOrder,\n  characteristic = defaultCharacteristic,\n  cutoffFrequency = 2,\n  samplingRate = defaultSamplingRate\n} = {}) => source => {\n  if (!nbChannels) {\n    throw new Error(\"Please supply nbChannels parameter\");\n  }\n  const highpassArray = new Array(nbChannels).fill(0).map(() =>\n    createHighpassIIR({\n      order,\n      characteristic,\n      Fs: samplingRate,\n      Fc: cutoffFrequency\n    })\n  );\n  return createPipe(\n    source,\n    map(eegObject => {\n      const isEpoch = Array.isArray(eegObject.data[0]);\n      return {\n        ...eegObject,\n        data: eegObject.data.map((channel, index) => {\n          if (isEpoch) {\n            const nans = [];\n            const safeChannel = channel.map((sample, sampleIndex) => {\n              if (isNaN(sample)) {\n                nans.push(sampleIndex);\n                const interpolation = interpolate(\n                  channel[sampleIndex - 1],\n                  channel[sampleIndex + 1]\n                );\n                return interpolation;\n              }\n              return sample;\n            });\n\n            // Then, perform filter\n            const filteredData = highpassArray[index].multiStep(safeChannel);\n\n            // Afterwards, reinsert NaNs\n            if (nans.length > 0) {\n              nans.forEach(nan => {\n                filteredData[nan] = NaN;\n              });\n            }\n            return filteredData;\n          }\n          // If Sample, only filter if not NaN\n          if (!isNaN(channel)) {\n            return highpassArray[index].singleStep(channel);\n          }\n          return channel;\n        })\n      };\n    })\n  );\n};\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/filtering/highpassFilter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "createHighpassIIR",
    "memberof": "src/pipes/filtering/highpassFilter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/filtering/highpassFilter.js~createHighpassIIR",
    "access": "public",
    "export": false,
    "importPath": "eeg-pipes/src/pipes/filtering/highpassFilter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "interpolate",
    "memberof": "src/pipes/filtering/highpassFilter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/filtering/highpassFilter.js~interpolate",
    "access": "public",
    "export": false,
    "importPath": "eeg-pipes/src/pipes/filtering/highpassFilter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "before",
        "types": [
          "*"
        ]
      },
      {
        "name": "after",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "highpassFilter",
    "memberof": "src/pipes/filtering/highpassFilter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/filtering/highpassFilter.js~highpassFilter",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/pipes/filtering/highpassFilter.js",
    "importStyle": "{highpassFilter}",
    "description": "Applies a highpass filter to EEG Data. Can be applied to both raw or epoched data",
    "examples": [
      "eeg$\n.pipe(highpassFilter({ cutoffFrequency: 2, nbChannels: 4 }))"
    ],
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "highpassFilter"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Observable<Sample | Epoch>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Filter options"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.nbChannels",
        "description": "Number of channels"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "options.cutoffFrequency",
        "description": "Cutoff frequency in Hz"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "250",
        "defaultRaw": 250,
        "name": "options.samplingRate",
        "description": "Sampling rate of the EEG device"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'butterworth'",
        "defaultRaw": "'butterworth'",
        "name": "options.characteristic",
        "description": "Filter characteristic. Options are 'bessel' and 'butterworth'"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "options.order",
        "description": "The number of 2nd order biquad filters applied to the signal"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable<Sample | Epoch>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "src/pipes/filtering/index.js",
    "content": "export * from './lowpassFilter';\nexport * from './highpassFilter';\nexport * from './bandpassFilter';\nexport * from './notchFilter';",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/filtering/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "src/pipes/filtering/lowpassFilter.js",
    "content": "import { CalcCascades, IirFilter } from \"fili\";\nimport { map } from \"rxjs/operators\";\nimport { createPipe } from \"../../utils/createPipe\";\nimport {\n  SAMPLE_RATE as defaultsamplingRate,\n  ORDER as defaultOrder,\n  CHARACTERISTIC as defaultCharacteristic\n} from \"../../constants\";\n\nconst createLowpassIIR = options => {\n  const calc = new CalcCascades();\n  const coeffs = calc.lowpass(options);\n  return new IirFilter(coeffs);\n};\n\nconst interpolate = (before, after) => {\n  if (!isNaN(before)) {\n    if (!isNaN(after)) {\n      return (before + after) / 2;\n    }\n    return before;\n  }\n  if (!isNaN(after)) {\n    return after;\n  }\n  return 0;\n};\n\n/**\n * Applies a lowpass filter to EEG Data. Can be applied to both raw or epoched data\n * @method lowpassFilter\n * @example eeg$\n  .pipe(lowpassFilter({ cutoffFrequency: 50, nbChannels: 4 }))\n * @param {Object} options - Filter options\n * @param {number} options.nbChannels Number of channels\n * @param {number} [options.cutoffFrequency=50] Cutoff frequency in Hz\n * @param {number} [options.samplingRate=250] Sampling rate of the EEG device\n * @param {String} [options.characteristic='butterworth'] Filter characteristic. Options are 'bessel' and 'butterworth'\n * @param {number} [options.order=2] The number of 2nd order biquad filters applied to the signal\n * \n * @returns {Observable<Sample | Epoch>}\n */\nexport const lowpassFilter = ({\n  nbChannels,\n  order = defaultOrder,\n  characteristic = defaultCharacteristic,\n  cutoffFrequency = 50,\n  samplingRate = defaultsamplingRate\n} = {}) => source => {\n  if (!nbChannels) {\n    throw new Error(\"Please supply nbChannels parameter\");\n  }\n  const lowpassArray = new Array(nbChannels).fill(0).map(() =>\n    createLowpassIIR({\n      order,\n      characteristic,\n      Fs: samplingRate,\n      Fc: cutoffFrequency\n    })\n  );\n  return createPipe(\n    source,\n    map(eegObject => {\n      const isEpoch = Array.isArray(eegObject.data[0]);\n      return {\n        ...eegObject,\n        data: eegObject.data.map((channel, index) => {\n          if (isEpoch) {\n            const nans = [];\n            const safeChannel = channel.map((sample, sampleIndex) => {\n              if (isNaN(sample)) {\n                nans.push(sampleIndex);\n                const interpolation = interpolate(\n                  channel[sampleIndex - 1],\n                  channel[sampleIndex + 1]\n                );\n                return interpolation;\n              }\n              return sample;\n            });\n\n            // Then, perform filter\n            const filteredData = lowpassArray[index].multiStep(safeChannel);\n\n            // Afterwards, reinsert NaNs\n            if (nans.length > 0) {\n              nans.forEach(nan => {\n                filteredData[nan] = NaN;\n              });\n            }\n            return filteredData;\n          }\n          // If Sample, only filter if not NaN\n          if (!isNaN(channel)) {\n            return lowpassArray[index].singleStep(channel);\n          }\n          return channel;\n        })\n      };\n    })\n  );\n};\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/filtering/lowpassFilter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "createLowpassIIR",
    "memberof": "src/pipes/filtering/lowpassFilter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/filtering/lowpassFilter.js~createLowpassIIR",
    "access": "public",
    "export": false,
    "importPath": "eeg-pipes/src/pipes/filtering/lowpassFilter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "interpolate",
    "memberof": "src/pipes/filtering/lowpassFilter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/filtering/lowpassFilter.js~interpolate",
    "access": "public",
    "export": false,
    "importPath": "eeg-pipes/src/pipes/filtering/lowpassFilter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "before",
        "types": [
          "*"
        ]
      },
      {
        "name": "after",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "lowpassFilter",
    "memberof": "src/pipes/filtering/lowpassFilter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/filtering/lowpassFilter.js~lowpassFilter",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/pipes/filtering/lowpassFilter.js",
    "importStyle": "{lowpassFilter}",
    "description": "Applies a lowpass filter to EEG Data. Can be applied to both raw or epoched data",
    "examples": [
      "eeg$\n.pipe(lowpassFilter({ cutoffFrequency: 50, nbChannels: 4 }))"
    ],
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "lowpassFilter"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Observable<Sample | Epoch>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Filter options"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.nbChannels",
        "description": "Number of channels"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "50",
        "defaultRaw": 50,
        "name": "options.cutoffFrequency",
        "description": "Cutoff frequency in Hz"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "250",
        "defaultRaw": 250,
        "name": "options.samplingRate",
        "description": "Sampling rate of the EEG device"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'butterworth'",
        "defaultRaw": "'butterworth'",
        "name": "options.characteristic",
        "description": "Filter characteristic. Options are 'bessel' and 'butterworth'"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "options.order",
        "description": "The number of 2nd order biquad filters applied to the signal"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable<Sample | Epoch>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/pipes/filtering/notchFilter.js",
    "content": "import { CalcCascades, IirFilter } from \"fili\";\nimport { map } from \"rxjs/operators\";\nimport { createPipe } from \"../../utils/createPipe\";\nimport {\n  SAMPLE_RATE as defaultsamplingRate,\n  ORDER as defaultOrder,\n  CHARACTERISTIC as defaultCharacteristic,\n  NOTCH_BW as defaultNotchBW\n} from \"../../constants\";\n\nconst createNotchIIR = (options, filterHarmonics) => {\n  const calc = new CalcCascades();\n  const coeffs = calc.bandstop(options);\n\n  if (filterHarmonics) {\n    const thirdHarmonicCoeffs = calc.bandstop({\n      ...options,\n      Fc: options.Fc * 3\n    });\n    const firstFilter = new IirFilter(coeffs);\n    const thirdFilter = new IirFilter(thirdHarmonicCoeffs);\n    return (signal, stepFunction) =>\n      thirdFilter[stepFunction](firstFilter[stepFunction](signal));\n  }\n  const filter = new IirFilter(coeffs);\n  return (signal, stepFunction) => filter[stepFunction](signal);\n};\n\nconst interpolate = (before, after) => {\n  if (!isNaN(before)) {\n    if (!isNaN(after)) {\n      return (before + after) / 2;\n    }\n    return before;\n  }\n  if (!isNaN(after)) {\n    return after;\n  }\n  return 0;\n};\n\n/**\n * Applies a notch filter to EEG Data. Can be applied to both raw or epoched data. Has the ability to filter out harmonics of line noise (e.g. 120Hz, 180Hz), though this is only needed for high-frequency devices with >= 1000hz sampling rate\n * @method notchFilter\n * @example eeg$\n  .pipe(notchFilter({ cutoffFrequency: 60, nbChannels: 10, samplingRate: 1000, filterHarmonics: true }))\n * @param {Object} options - Filter options\n * @param {number} options.nbChannels Number of channels\n * @param {number} [options.cutoffFrequency=60] Cutoff frequency in Hz\n * @param {number} [options.bandWidth=0.5] Width of the cutoff centered around the notched frequency. Larger values reduce filter out more of the notch frequency at the cost of also reducing nearby frequencies\n * @param {boolean} [options.filterHarmonics=false] Whether to filter harmonics of the notch frequency as well\n * @param {number} [options.samplingRate=250] Sampling rate of the EEG device\n * @param {String} [options.characteristic='butterworth'] Filter characteristic. Options are 'bessel' and 'butterworth'\n * @param {number} [options.order=2] Number of 2nd order biquad filters applied to the signal\n * \n * @returns {Observable<Sample | Epoch>}\n */\nexport const notchFilter = ({\n  nbChannels,\n  order = defaultOrder,\n  characteristic = defaultCharacteristic,\n  cutoffFrequency = 60,\n  samplingRate = defaultsamplingRate,\n  bandWidth = defaultNotchBW,\n  filterHarmonics = false\n} = {}) => source => {\n  if (!nbChannels) {\n    throw new Error(\"Please supply nbChannels parameter\");\n  }\n  const notchArray = new Array(nbChannels).fill(0).map(() =>\n    createNotchIIR(\n      {\n        order,\n        characteristic,\n        Fs: samplingRate,\n        Fc: cutoffFrequency,\n        BW: bandWidth\n      },\n      filterHarmonics\n    )\n  );\n  return createPipe(\n    source,\n    map(eegObject => {\n      const isEpoch = Array.isArray(eegObject.data[0]);\n      return {\n        ...eegObject,\n        data: eegObject.data.map((channel, index) => {\n          if (isEpoch) {\n            const nans = [];\n            const safeChannel = channel.map((sample, sampleIndex) => {\n              if (isNaN(sample)) {\n                nans.push(sampleIndex);\n                const interpolation = interpolate(\n                  channel[sampleIndex - 1],\n                  channel[sampleIndex + 1]\n                );\n                return interpolation;\n              }\n              return sample;\n            });\n\n            // Then, perform filter\n            const filteredData = notchArray[index](safeChannel, \"multiStep\");\n\n            // Afterwards, reinsert NaNs\n            if (nans.length > 0) {\n              nans.forEach(nan => {\n                filteredData[nan] = NaN;\n              });\n            }\n            return filteredData;\n          }\n          // If Sample, only filter if not NaN\n          if (!isNaN(channel)) {\n            return notchArray[index](channel, \"singleStep\");\n          }\n          return channel;\n        })\n      };\n    })\n  );\n};\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/filtering/notchFilter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "createNotchIIR",
    "memberof": "src/pipes/filtering/notchFilter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/filtering/notchFilter.js~createNotchIIR",
    "access": "public",
    "export": false,
    "importPath": "eeg-pipes/src/pipes/filtering/notchFilter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "filterHarmonics",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "interpolate",
    "memberof": "src/pipes/filtering/notchFilter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/filtering/notchFilter.js~interpolate",
    "access": "public",
    "export": false,
    "importPath": "eeg-pipes/src/pipes/filtering/notchFilter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "before",
        "types": [
          "*"
        ]
      },
      {
        "name": "after",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "notchFilter",
    "memberof": "src/pipes/filtering/notchFilter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/filtering/notchFilter.js~notchFilter",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/pipes/filtering/notchFilter.js",
    "importStyle": "{notchFilter}",
    "description": "Applies a notch filter to EEG Data. Can be applied to both raw or epoched data. Has the ability to filter out harmonics of line noise (e.g. 120Hz, 180Hz), though this is only needed for high-frequency devices with >= 1000hz sampling rate",
    "examples": [
      "eeg$\n.pipe(notchFilter({ cutoffFrequency: 60, nbChannels: 10, samplingRate: 1000, filterHarmonics: true }))"
    ],
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "notchFilter"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Observable<Sample | Epoch>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Filter options"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.nbChannels",
        "description": "Number of channels"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "60",
        "defaultRaw": 60,
        "name": "options.cutoffFrequency",
        "description": "Cutoff frequency in Hz"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.5",
        "defaultRaw": 0.5,
        "name": "options.bandWidth",
        "description": "Width of the cutoff centered around the notched frequency. Larger values reduce filter out more of the notch frequency at the cost of also reducing nearby frequencies"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.filterHarmonics",
        "description": "Whether to filter harmonics of the notch frequency as well"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "250",
        "defaultRaw": 250,
        "name": "options.samplingRate",
        "description": "Sampling rate of the EEG device"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'butterworth'",
        "defaultRaw": "'butterworth'",
        "name": "options.characteristic",
        "description": "Filter characteristic. Options are 'bessel' and 'butterworth'"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "options.order",
        "description": "Number of 2nd order biquad filters applied to the signal"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable<Sample | Epoch>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "src/pipes/frequency/alphaPower.js",
    "content": "import { createPipe } from \"../../utils/createPipe\";\nimport { averagePower } from \"./averagePower\";\nimport { sliceFFT } from \"./sliceFFT\";\n\nimport { FREQUENCY_BANDS as frequencyBands } from \"../../constants\";\n\n/**\n * @method alphaPower\n * Filters FFT buffer based on alpha frequency range and averages the power\n *\n * @returns {Observable} fftBuffer\n */\nexport const alphaPower = () => source =>\n  createPipe(\n    source,\n    sliceFFT(frequencyBands.alpha),\n    averagePower()\n  );\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/frequency/alphaPower.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "alphaPower",
    "memberof": "src/pipes/frequency/alphaPower.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/frequency/alphaPower.js~alphaPower",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/pipes/frequency/alphaPower.js",
    "importStyle": "{alphaPower}",
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "alphaPower\nFilters FFT buffer based on alpha frequency range and averages the power"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Observable} fftBuffer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable"
      ],
      "spread": false,
      "description": "fftBuffer"
    },
    "params": []
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/pipes/frequency/averagePower.js",
    "content": "import { map } from \"rxjs/operators\";\n\nimport { createPipe } from \"../../utils/createPipe\";\nimport { average } from \"../../utils\";\nimport { SAMPLE_RATE as defaultSampleRate } from \"../../constants\";\n\n/**\n * @method averagePower\n * Given an fftBuffer, it outputs the average per channel\n *\n * @returns {Observable} band powers array\n */\nexport const averagePower = () => source =>\n  createPipe(\n    source,\n    map(fftBuffer =>\n      fftBuffer.reduce((acc, channel) => [\n        ...acc,\n        average(channel)\n      ], [])\n    )\n  );\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/frequency/averagePower.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "averagePower",
    "memberof": "src/pipes/frequency/averagePower.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/frequency/averagePower.js~averagePower",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/pipes/frequency/averagePower.js",
    "importStyle": "{averagePower}",
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "averagePower\nGiven an fftBuffer, it outputs the average per channel"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Observable} band powers array"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable"
      ],
      "spread": false,
      "description": "band powers array"
    },
    "params": []
  },
  {
    "__docId__": 83,
    "kind": "file",
    "name": "src/pipes/frequency/betaPower.js",
    "content": "import { createPipe } from \"../../utils/createPipe\";\nimport { averagePower } from \"./averagePower\";\nimport { sliceFFT } from \"./sliceFFT\";\n\nimport { FREQUENCY_BANDS as frequencyBands } from \"../../constants\";\n\n/**\n * @method betaPower\n * Filters FFT buffer based on beta frequency range and averages the power\n *\n * @returns {Observable} fftBuffer\n */\nexport const betaPower = () => source =>\n  createPipe(\n    source,\n    sliceFFT(frequencyBands.beta),\n    averagePower()\n  );\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/frequency/betaPower.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "betaPower",
    "memberof": "src/pipes/frequency/betaPower.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/frequency/betaPower.js~betaPower",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/pipes/frequency/betaPower.js",
    "importStyle": "{betaPower}",
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "betaPower\nFilters FFT buffer based on beta frequency range and averages the power"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Observable} fftBuffer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable"
      ],
      "spread": false,
      "description": "fftBuffer"
    },
    "params": []
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "src/pipes/frequency/bufferFFT.js",
    "content": "import { FFT } from \"dsp.js\";\nimport { bufferCount, map } from \"rxjs/operators\";\n\nimport { createPipe } from \"../../utils/createPipe\";\nimport { groupByChannel } from \"../../utils/groupByChannel\";\n\nimport {\n  SAMPLE_RATE as defaultSampleRate,\n  FFT_BINS as defaultFftBins,\n  DATA_PROP as defaultDataProp\n} from \"../../constants\";\n\n/**\n * @method bufferFFT\n * Takes a samples and returns an FFT buffer\n *\n * @param {Object} options\n * @returns {Observable}\n */\nexport const bufferFFT = ({\n  bins = defaultFftBins,\n  window = null,\n  sampleRate = defaultSampleRate,\n  dataProp = defaultDataProp\n} = {}) => source => {\n  const fft = channelGroup => {\n    const safeSamples = channelGroup.map(x => {\n      if (isNaN(x) || !x) {\n        return 0;\n      }\n      return x;\n    });\n    const fft = new FFT(bins, sampleRate);\n    fft.forward(safeSamples);\n    return Array.from(fft.spectrum);\n  };\n  return createPipe(\n    source,\n    bufferCount(bins, window),\n    map(samplesBuffer => groupByChannel(samplesBuffer, dataProp).map(fft))\n  );\n};\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/frequency/bufferFFT.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "bufferFFT",
    "memberof": "src/pipes/frequency/bufferFFT.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/frequency/bufferFFT.js~bufferFFT",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/pipes/frequency/bufferFFT.js",
    "importStyle": "{bufferFFT}",
    "description": "",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "bufferFFT\nTakes a samples and returns an FFT buffer"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Observable}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "src/pipes/frequency/deltaPower.js",
    "content": "import { createPipe } from \"../../utils/createPipe\";\nimport { averagePower } from \"./averagePower\";\nimport { sliceFFT } from \"./sliceFFT\";\n\nimport { FREQUENCY_BANDS as frequencyBands } from \"../../constants\";\n\n/**\n * @method deltaPower\n * Filters FFT buffer based on delta frequency range and averages the power\n *\n * @returns {Observable} fftBuffer\n */\nexport const deltaPower = () => source =>\n  createPipe(\n    source,\n    sliceFFT(frequencyBands.delta),\n    averagePower()\n  );\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/frequency/deltaPower.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "deltaPower",
    "memberof": "src/pipes/frequency/deltaPower.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/frequency/deltaPower.js~deltaPower",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/pipes/frequency/deltaPower.js",
    "importStyle": "{deltaPower}",
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "deltaPower\nFilters FFT buffer based on delta frequency range and averages the power"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Observable} fftBuffer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable"
      ],
      "spread": false,
      "description": "fftBuffer"
    },
    "params": []
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "src/pipes/frequency/gammaPower.js",
    "content": "import { createPipe } from \"../../utils/createPipe\";\nimport { averagePower } from \"./averagePower\";\nimport { sliceFFT } from \"./sliceFFT\";\n\nimport { FREQUENCY_BANDS as frequencyBands } from \"../../constants\";\n\n/**\n * @method gammaPower\n * Filters FFT buffer based on gamma frequency range and averages the power\n *\n * @returns {Observable} fftBuffer\n */\nexport const gammaPower = () => source =>\n  createPipe(\n    source,\n    sliceFFT(frequencyBands.gamma),\n    averagePower()\n  );\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/frequency/gammaPower.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "gammaPower",
    "memberof": "src/pipes/frequency/gammaPower.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/frequency/gammaPower.js~gammaPower",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/pipes/frequency/gammaPower.js",
    "importStyle": "{gammaPower}",
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "gammaPower\nFilters FFT buffer based on gamma frequency range and averages the power"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Observable} fftBuffer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable"
      ],
      "spread": false,
      "description": "fftBuffer"
    },
    "params": []
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "src/pipes/frequency/index.js",
    "content": "export * from './alphaPower';\nexport * from './averagePower';\nexport * from './betaPower';\nexport * from './bufferFFT';\nexport * from './deltaPower';\nexport * from './gammaPower';\nexport * from './powerByBand';\nexport * from './sliceFFT';\nexport * from './thetaPower';",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/frequency/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "src/pipes/frequency/powerByBand.js",
    "content": "import { of } from \"rxjs/observable/of\";\nimport { zip } from \"rxjs/observable/zip\";\nimport { flatMap } from \"rxjs/operators\";\n\nimport { createPipe } from \"../../utils/createPipe\";\nimport { averagePower } from \"./averagePower\";\nimport { sliceFFT } from \"./sliceFFT\";\n\nimport {\n    SAMPLE_RATE as defaultSampleRate,\n    FREQUENCY_BANDS as defaultBands\n} from \"../../constants\";\n\n/**\n * @method powerByBand\n * Returns an object with average band powers for all the classic EEG bands.\n *\n * @param {object} bands { [bandName]: range[min, max] }\n * @returns {Observable} bands { [bandName]: bandPower }\n */\nexport const powerByBand = (\n  bands = defaultBands,\n  sampleRate = defaultSampleRate\n) => source =>\n  createPipe(\n    source,\n    flatMap(fftBuffer => {\n      const entries = Object.entries(bands);\n      const bandPowers = entries.map(([, range ]) =>\n        of(fftBuffer).pipe(\n          sliceFFT(range, sampleRate),\n          averagePower()\n        )\n      );\n      const zipPowers = (...powers) =>\n        powers.reduce((acc, power, index) => ({\n          ...acc,\n          [entries[index][0]]: power\n        }), {});\n      return zip(...bandPowers, zipPowers);\n    })\n  );\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/frequency/powerByBand.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "powerByBand",
    "memberof": "src/pipes/frequency/powerByBand.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/frequency/powerByBand.js~powerByBand",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/pipes/frequency/powerByBand.js",
    "importStyle": "{powerByBand}",
    "description": "",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "powerByBand\nReturns an object with average band powers for all the classic EEG bands."
      },
      {
        "tagName": "@returns",
        "tagValue": "{Observable} bands { [bandName]: bandPower }"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "bands",
        "description": "{ [bandName]: range[min, max] }"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable"
      ],
      "spread": false,
      "description": "bands { [bandName]: bandPower }"
    }
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "src/pipes/frequency/sliceFFT.js",
    "content": "import { map } from \"rxjs/operators\";\n\nimport { createPipe } from \"../../utils/createPipe\";\n\nimport { SAMPLE_RATE as defaultSampleRate } from \"../../constants\";\n\n/**\n * @method sliceFFT\n * Filters FFT buffer by frequency range.\n *\n * @param {array} range: [min, max]\n * @param {number} sampleRate\n * @returns {Observable} fftBuffer\n */\nexport const sliceFFT = (\n  [min = 0, max = 128],\n  sampleRate = defaultSampleRate\n) => source =>\n  createPipe(\n    source,\n    map(fftBuffer => {\n      if (!fftBuffer.length || !fftBuffer[0].length) {\n        return fftBuffer;\n      }\n\n      const bins = fftBuffer[0].length * 2;\n\n      const ranges = Array.from({ length: bins / 2 }, (range, index) =>\n        Math.ceil(index * (sampleRate / bins))\n      );\n\n      return fftBuffer.map(channel =>\n        channel.filter(\n          (spectrum, index) => ranges[index] >= min && ranges[index] <= max\n        )\n      );\n    })\n  );\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/frequency/sliceFFT.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "sliceFFT",
    "memberof": "src/pipes/frequency/sliceFFT.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/frequency/sliceFFT.js~sliceFFT",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/pipes/frequency/sliceFFT.js",
    "importStyle": "{sliceFFT}",
    "description": "",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "sliceFFT\nFilters FFT buffer by frequency range."
      },
      {
        "tagName": "@returns",
        "tagValue": "{Observable} fftBuffer"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "range:",
        "description": "[min, max]"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sampleRate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable"
      ],
      "spread": false,
      "description": "fftBuffer"
    }
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "src/pipes/frequency/thetaPower.js",
    "content": "import { createPipe } from \"../../utils/createPipe\";\nimport { averagePower } from \"./averagePower\";\nimport { sliceFFT } from \"./sliceFFT\";\n\nimport { FREQUENCY_BANDS as frequencyBands } from \"../../constants\";\n\n/**\n * @method thetaPower\n * Filters FFT buffer based on theta frequency range and averages the power\n *\n * @returns {Observable} fftBuffer\n */\nexport const thetaPower = () => source =>\n  createPipe(\n    source,\n    sliceFFT(frequencyBands.theta),\n    averagePower()\n  );\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/frequency/thetaPower.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "thetaPower",
    "memberof": "src/pipes/frequency/thetaPower.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/frequency/thetaPower.js~thetaPower",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/pipes/frequency/thetaPower.js",
    "importStyle": "{thetaPower}",
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "thetaPower\nFilters FFT buffer based on theta frequency range and averages the power"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Observable} fftBuffer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable"
      ],
      "spread": false,
      "description": "fftBuffer"
    },
    "params": []
  },
  {
    "__docId__": 98,
    "kind": "file",
    "name": "src/pipes/index.js",
    "content": "export * from \"./filtering\";\nexport * from \"./frequency\";\nexport * from \"./reducer\";\nexport * from \"./unit\";\nexport * from \"./utility\";\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/pipes/reducer/averageDeep.js",
    "content": "import { map } from \"rxjs/operators\";\n\nimport { average } from \"../../utils\";\n\n/**\n * @method averageDeep\n * Averages list of values including deep lists, to a single value\n *\n * @returns {Observable} average\n */\nexport const averageDeep = () =>\n  map(channels => average(channels));",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/reducer/averageDeep.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "averageDeep",
    "memberof": "src/pipes/reducer/averageDeep.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/reducer/averageDeep.js~averageDeep",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/pipes/reducer/averageDeep.js",
    "importStyle": "{averageDeep}",
    "description": "",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "averageDeep\nAverages list of values including deep lists, to a single value"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Observable} average"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable"
      ],
      "spread": false,
      "description": "average"
    },
    "params": []
  },
  {
    "__docId__": 101,
    "kind": "file",
    "name": "src/pipes/reducer/index.js",
    "content": "export * from \"./averageDeep\";",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/reducer/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "src/pipes/unit/index.js",
    "content": "\nexport * from './voltsToMicrovolts';\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/unit/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "src/pipes/unit/voltsToMicrovolts.js",
    "content": "import { map } from \"rxjs/operators\";\n\nimport { createPipe } from \"../../utils/createPipe\";\n\nimport {\n  USE_LOG as useLog,\n  DATA_PROP as defaultDataProp\n} from \"../../constants\";\n\n/**\n * Converts a stream of EEG data (either eegObjects or Epochs) from volts to microvolts\n * @method toMicrovolts\n * @example eeg&.pipe(toMicrovolts)\n * @param {Object} options - Conversion options\n * @param {boolean} [options.useLog=false] Whether to use logarithmic conversion\n * @param {string} [options.dataProp='data'] Name of the key associated with eeg data\n *\n * @returns {Observable<Sample | Epoch>}\n */\nexport const voltsToMicrovolts = ({\n  log = useLog,\n  dataProp = defaultDataProp\n} = {}) => source =>\n  createPipe(\n    source,\n    map(eegObject => {\n      const isEpoch = Array.isArray(eegObject.data[0]);\n      const conversion = log\n        ? volt => Math.log10(Math.pow(10, 6) * volt)\n        : volt => Math.pow(10, 6) * volt;\n      return {\n        ...eegObject,\n        [dataProp]: eegObject[dataProp].map(channel => {\n          if (isEpoch) {\n            return channel.map(conversion);\n          }\n          return conversion(channel);\n        })\n      };\n    })\n  );\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/unit/voltsToMicrovolts.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "voltsToMicrovolts",
    "memberof": "src/pipes/unit/voltsToMicrovolts.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/unit/voltsToMicrovolts.js~voltsToMicrovolts",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/pipes/unit/voltsToMicrovolts.js",
    "importStyle": "{voltsToMicrovolts}",
    "description": "Converts a stream of EEG data (either eegObjects or Epochs) from volts to microvolts",
    "examples": [
      "eeg&.pipe(toMicrovolts)"
    ],
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "toMicrovolts"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Observable<Sample | Epoch>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Conversion options"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.useLog",
        "description": "Whether to use logarithmic conversion"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'data'",
        "defaultRaw": "'data'",
        "name": "options.dataProp",
        "description": "Name of the key associated with eeg data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable<Sample | Epoch>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "src/pipes/utility/addInfo.js",
    "content": "import { map } from \"rxjs/operators\";\n\nimport { createPipe } from \"../../utils/createPipe\";\n\nconst isObject = object => object instanceof Object;\nconst isFunction = object => typeof object === \"function\";\n\nconst patch = sample => info => ({\n  ...sample,\n  info: {\n    ...(sample.info || {}),\n    ...(info || {})\n  }\n});\n\n/**\n * Annotates stream with user-defined metadata\n * @method addInfo\n * @example eeg$.pipe(addinfo({ samplingRate: 256, channelNames: [\"Af7\", \"Fp1\", \"Fp2\", \"Af8\"] })\n *\n * @param {Object} info - Info to be added to the EEG stream. Relevant info may include: `samplingRate` and `channelNames`\n * @returns {Observable<Sample | Epoch | PSD>}\n */\nexport const addInfo = (arg = {}) => source =>\n  createPipe(\n    source,\n    map(sample => {\n      if (!isObject(sample) || (!isObject(arg) && !isFunction(arg))) {\n        return sample;\n      }\n      const info = isFunction(arg) ? arg(sample) : arg;\n      return patch(sample)(info);\n    })\n  );\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/utility/addInfo.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "isObject",
    "memberof": "src/pipes/utility/addInfo.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/utility/addInfo.js~isObject",
    "access": "public",
    "export": false,
    "importPath": "eeg-pipes/src/pipes/utility/addInfo.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "isFunction",
    "memberof": "src/pipes/utility/addInfo.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/utility/addInfo.js~isFunction",
    "access": "public",
    "export": false,
    "importPath": "eeg-pipes/src/pipes/utility/addInfo.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "patch",
    "memberof": "src/pipes/utility/addInfo.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/utility/addInfo.js~patch",
    "access": "public",
    "export": false,
    "importPath": "eeg-pipes/src/pipes/utility/addInfo.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "sample",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "addInfo",
    "memberof": "src/pipes/utility/addInfo.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/utility/addInfo.js~addInfo",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/pipes/utility/addInfo.js",
    "importStyle": "{addInfo}",
    "description": "Annotates stream with user-defined metadata",
    "examples": [
      "eeg$.pipe(addinfo({ samplingRate: 256, channelNames: [\"Af7\", \"Fp1\", \"Fp2\", \"Af8\"] })"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "addInfo"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Observable<Sample | Epoch | PSD>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "Info to be added to the EEG stream. Relevant info may include: `samplingRate` and `channelNames`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable<Sample | Epoch | PSD>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/pipes/utility/bufferCount.js",
    "content": "export * from \"rxjs/operators/bufferCount\";\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/utility/bufferCount.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "file",
    "name": "src/pipes/utility/bufferTime.js",
    "content": "export * from \"rxjs/operators/bufferTime\";\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/utility/bufferTime.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 112,
    "kind": "file",
    "name": "src/pipes/utility/bufferToEpoch.js",
    "content": "import { map } from \"rxjs/operators\";\n\nimport { createPipe } from \"../../utils/createPipe\";\nimport { groupByChannel } from \"../../utils/groupByChannel\";\n\nimport { DATA_PROP as defaultDataProp } from \"../../constants\";\n\n/**\n * Takes an array or RxJS buffer of EEG Samples and returns an Epoch. Requires samplingRate parameter unless stream already contains samplingRate in info.\n * @method bufferToEpoch\n * @example eeg$.pipe(bufferTime(1000), bufferToEpoch({ samplingRate: 256 }))\n *\n * @param {Object} options - Data structure options\n * @param {number} [options.samplingRate] Sampling rate\n * @param {string} [options.dataProp='data'] Name of the key associated with eeg data\n *\n * @returns {Observable<Epoch>}\n */\nexport const bufferToEpoch = ({\n  samplingRate,\n  dataProp = defaultDataProp\n} = {}) => source$ =>\n  createPipe(\n    source$,\n    map(samplesArray => ({\n      [dataProp]: groupByChannel(samplesArray, dataProp),\n      info: {\n        ...samplesArray[0].info,\n        startTime: samplesArray[0].timestamp,\n        samplingRate: samplingRate\n          ? samplingRate\n          : samplesArray[0].info.samplingRate\n      }\n    }))\n  );\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/utility/bufferToEpoch.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "bufferToEpoch",
    "memberof": "src/pipes/utility/bufferToEpoch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/utility/bufferToEpoch.js~bufferToEpoch",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/pipes/utility/bufferToEpoch.js",
    "importStyle": "{bufferToEpoch}",
    "description": "Takes an array or RxJS buffer of EEG Samples and returns an Epoch. Requires samplingRate parameter unless stream already contains samplingRate in info.",
    "examples": [
      "eeg$.pipe(bufferTime(1000), bufferToEpoch({ samplingRate: 256 }))"
    ],
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "bufferToEpoch"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Observable<Epoch>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Data structure options"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.samplingRate",
        "description": "Sampling rate"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'data'",
        "defaultRaw": "'data'",
        "name": "options.dataProp",
        "description": "Name of the key associated with eeg data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable<Epoch>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "src/pipes/utility/epoch.js",
    "content": "import { bufferCount, scan, filter } from \"rxjs/operators\";\n\nimport { createPipe } from \"../../utils/createPipe\";\nimport { bufferToEpoch } from \"../utility/bufferToEpoch\";\n\nimport {\n  EPOCH_DURATION as defaultEpochDuration,\n  EPOCH_INTERVAL as defaultEpochInterval,\n  DATA_PROP as defaultDataProp\n} from \"../../constants\";\n\n/**\n * Converts a stream of individual Samples of EEG data into a stream of Epochs of a given duration emitted at specified interval. This operator functions similarly to a circular buffer internally and allows overlapping Epochs of data to be emitted (e.g. emitting the last one second of data every 100ms). Requires samplingRate parameter unless stream already contains samplingRate in info.\n * @method epoch\n * @example eeg$.pipe(epoch({ duration: 1024, interval: 100, samplingRate: 256 }))\n * @param {Object} options - Epoching options\n * @param {number} options.duration Number of samples to include in each epoch\n * @param {number} options.interval Time between emitted Epochs\n * @param {number} [options.samplingRate] Sampling rate\n * @param {string} [options.dataProp='data'] Name of the key associated with eeg data\n * @returns {Observable} Epoch\n */\nexport const epoch = ({\n  duration = defaultEpochDuration,\n  interval = defaultEpochInterval,\n  samplingRate,\n  dataProp = defaultDataProp\n} = {}) => source$ =>\n  createPipe(\n    source$,\n    bufferCount(interval),\n    scan((acc, val) =>\n      acc.concat(val).slice(acc.length < duration ? 0 : -duration)\n    ),\n    filter(samplesArray => samplesArray.length === duration),\n    bufferToEpoch({ samplingRate, dataProp })\n  );\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/utility/epoch.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "epoch",
    "memberof": "src/pipes/utility/epoch.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/utility/epoch.js~epoch",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/pipes/utility/epoch.js",
    "importStyle": "{epoch}",
    "description": "Converts a stream of individual Samples of EEG data into a stream of Epochs of a given duration emitted at specified interval. This operator functions similarly to a circular buffer internally and allows overlapping Epochs of data to be emitted (e.g. emitting the last one second of data every 100ms). Requires samplingRate parameter unless stream already contains samplingRate in info.",
    "examples": [
      "eeg$.pipe(epoch({ duration: 1024, interval: 100, samplingRate: 256 }))"
    ],
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "epoch"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Observable} Epoch"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Epoching options"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.duration",
        "description": "Number of samples to include in each epoch"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.interval",
        "description": "Time between emitted Epochs"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.samplingRate",
        "description": "Sampling rate"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'data'",
        "defaultRaw": "'data'",
        "name": "options.dataProp",
        "description": "Name of the key associated with eeg data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable"
      ],
      "spread": false,
      "description": "Epoch"
    }
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "src/pipes/utility/index.js",
    "content": "export * from './addInfo';\nexport * from './bufferCount';\nexport * from './bufferTime';\nexport * from './bufferToEpoch';\nexport * from './pickChannels';\nexport * from './removeChannels';\nexport * from './epoch';",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/utility/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "src/pipes/utility/pickChannels.js",
    "content": "import { map } from \"rxjs/operators\";\n\nimport { createPipe } from \"../../utils/createPipe\";\n\nimport { DATA_PROP as defaultDataProp } from \"../../constants\";\n\n/**\n * @method pickChannels\n * Selects channel based on channel number\n *\n * @param {Object} options\n * @returns {Observable} sample\n */\nexport const pickChannels = (\n  { channels = [], dataProp = defaultDataProp } = {}\n) => source =>\n  createPipe(\n    source,\n    map(sample => {\n      const channelData = sample[dataProp].filter((channel, index) =>\n        channels.includes(index + 1)\n      );\n\n      return {\n        ...sample,\n        [dataProp]: channelData\n      };\n    })\n  );\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/utility/pickChannels.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "pickChannels",
    "memberof": "src/pipes/utility/pickChannels.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/utility/pickChannels.js~pickChannels",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/pipes/utility/pickChannels.js",
    "importStyle": "{pickChannels}",
    "description": "",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "pickChannels\nSelects channel based on channel number"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Observable} sample"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable"
      ],
      "spread": false,
      "description": "sample"
    }
  },
  {
    "__docId__": 119,
    "kind": "file",
    "name": "src/pipes/utility/removeChannels.js",
    "content": "import { map } from \"rxjs/operators\";\nimport { createPipe } from \"../../utils/createPipe\";\n\nimport { DATA_PROP as defaultDataProp } from \"../../constants\";\n\n/**\n * @method removeChannels\n * Removes channels from stream based on channel number (indexed at one)\n *\n * @param {Object} options\n * @returns {Observable} sample\n */\nexport const removeChannels = (\n  { channels = [], dataProp = defaultDataProp } = {}\n) => source =>\n  createPipe(\n    source,\n    map(sample => {\n      const channelData = sample[dataProp].filter(\n        (channel, index) => !channels.includes(index + 1)\n      );\n\n      return {\n        ...sample,\n        [dataProp]: channelData\n      };\n    })\n  );\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/pipes/utility/removeChannels.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "removeChannels",
    "memberof": "src/pipes/utility/removeChannels.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/pipes/utility/removeChannels.js~removeChannels",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/pipes/utility/removeChannels.js",
    "importStyle": "{removeChannels}",
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "removeChannels\nRemoves channels from stream based on channel number (indexed at one)"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Observable} sample"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observable"
      ],
      "spread": false,
      "description": "sample"
    }
  },
  {
    "__docId__": 121,
    "kind": "file",
    "name": "src/utils/average.js",
    "content": "export const average = list =>\n  list.reduce(\n    (acc, value) => acc + (Array.isArray(value) ? average(value) : value)\n    , 0\n  ) / list.length;\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/utils/average.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "average",
    "memberof": "src/utils/average.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/average.js~average",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/utils/average.js",
    "importStyle": "{average}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "list",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "src/utils/createEEG.js",
    "content": "import { interval } from \"rxjs/observable/interval\";\nimport { map } from \"rxjs/operators\";\n\nimport museCsv from \"../../dataset/muse-lsl.csv\";\nimport { sample } from \"rxjs/operator/sample\";\n\n// Code splitting: dynaically importing the csv so it is not included in the main bundle\n// @TODO: not currently working, webpack bug: https://twitter.com/castillo__io/status/975585584486916096\n// export const getMuseCsv = async () =>\n//   await import(/* webpackChunkName: \"museCsv\" */\n//   \"../../dataset/muse-lsl.csv\").then(\n//     csv => csv.map(row => row.slice(1, 5)) // filter channel data\n//   );\n\nconst NUM_CHANNELS = 4;\nconst SAMPLE_RATE = 256;\n\nlet sinCounter = 0;\n\n// filter channel data\nconst museData = museCsv.map(row => row.slice(1, 5));\n\nconst createMockRow = length => Array.from({ length }, () => Math.random());\n\nconst createSineRow = (length, freq, sampleRate) => {\n  sinCounter++;\n  return Array.from(\n    { length },\n    () => Math.sin(sinCounter / (sampleRate / freq / (Math.PI * 2))) * 100\n  );\n};\n\nconst getCsvRow = (csv, interval) => csv[interval % csv.length];\n\nconst injectNaNs = (data, [min, max]) =>\n  data.map(value => (value > min && value < max ? NaN : value));\n\n/*\n * Creates a stream of pre-recorded EEG data that can be used for testing\n * Default data was collected from Muse 2016 with muse-lsl: staring at software \n */\nexport const createEEG = ({\n  channels = NUM_CHANNELS,\n  sampleRate = SAMPLE_RATE,\n  mock = false,\n  NaNRange = [0, 0],\n  sine = false,\n  csv = museData\n} = {}) =>\n  interval(1000 / sampleRate).pipe(\n    map(interval => {\n      const timestamp = Date.now();\n      let row = [];\n      if (sine) {\n        row = createSineRow(channels, sine, sampleRate);\n      } else {\n        row = mock ? createMockRow(channels) : getCsvRow(csv, interval);\n      }\n      const data = injectNaNs(row, NaNRange);\n      return { timestamp, data };\n    })\n  );\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/utils/createEEG.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "NUM_CHANNELS",
    "memberof": "src/utils/createEEG.js",
    "static": true,
    "longname": "src/utils/createEEG.js~NUM_CHANNELS",
    "access": "public",
    "export": false,
    "importPath": "eeg-pipes/src/utils/createEEG.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "SAMPLE_RATE",
    "memberof": "src/utils/createEEG.js",
    "static": true,
    "longname": "src/utils/createEEG.js~SAMPLE_RATE",
    "access": "public",
    "export": false,
    "importPath": "eeg-pipes/src/utils/createEEG.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "sinCounter",
    "memberof": "src/utils/createEEG.js",
    "static": true,
    "longname": "src/utils/createEEG.js~sinCounter",
    "access": "public",
    "export": false,
    "importPath": "eeg-pipes/src/utils/createEEG.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "museData",
    "memberof": "src/utils/createEEG.js",
    "static": true,
    "longname": "src/utils/createEEG.js~museData",
    "access": "public",
    "export": false,
    "importPath": "eeg-pipes/src/utils/createEEG.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "createMockRow",
    "memberof": "src/utils/createEEG.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/createEEG.js~createMockRow",
    "access": "public",
    "export": false,
    "importPath": "eeg-pipes/src/utils/createEEG.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "createSineRow",
    "memberof": "src/utils/createEEG.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/createEEG.js~createSineRow",
    "access": "public",
    "export": false,
    "importPath": "eeg-pipes/src/utils/createEEG.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "length",
        "types": [
          "*"
        ]
      },
      {
        "name": "freq",
        "types": [
          "*"
        ]
      },
      {
        "name": "sampleRate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "getCsvRow",
    "memberof": "src/utils/createEEG.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/createEEG.js~getCsvRow",
    "access": "public",
    "export": false,
    "importPath": "eeg-pipes/src/utils/createEEG.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "csv",
        "types": [
          "*"
        ]
      },
      {
        "name": "interval",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "injectNaNs",
    "memberof": "src/utils/createEEG.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/createEEG.js~injectNaNs",
    "access": "public",
    "export": false,
    "importPath": "eeg-pipes/src/utils/createEEG.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "arrayPattern1",
        "types": [
          "*[]"
        ],
        "defaultRaw": [
          "null",
          "null"
        ],
        "defaultValue": "[null, null]"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "function",
    "name": "createEEG",
    "memberof": "src/utils/createEEG.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/createEEG.js~createEEG",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/utils/createEEG.js",
    "importStyle": "{createEEG}",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "optional": true,
        "types": [
          "{\"channels\": *, \"sampleRate\": *, \"mock\": *, \"NaNRange\": *, \"sine\": *, \"csv\": *}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "src/utils/createMockStream.js",
    "content": "import { createEEG } from \"./createEEG\";\n\n// Exists for backwards compatibility. Displays deprecation warning.\nexport const createMockStream = (options = {}) => {\n  console.warn('createMockStream will be deprecated in the next major release. Use the createEEG instead.');\n  return createEEG({\n    ...options,\n    mock: true\n  });\n};\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/utils/createMockStream.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "createMockStream",
    "memberof": "src/utils/createMockStream.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/createMockStream.js~createMockStream",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/utils/createMockStream.js",
    "importStyle": "{createMockStream}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "file",
    "name": "src/utils/createPipe.js",
    "content": "import { Observable } from \"rxjs/Observable\";\n\nexport const createPipe = (source, ...pipes) =>\n  new Observable(observer =>\n    source.pipe(...pipes).subscribe({\n      next(event) {\n        observer.next(event);\n      },\n      error(err) {\n        observer.error(err);\n      },\n      complete() {\n        observer.complete();\n      }\n    })\n  );\n\nexport default createPipe;\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/utils/createPipe.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "createPipe",
    "memberof": "src/utils/createPipe.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/createPipe.js~createPipe",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/utils/createPipe.js",
    "importStyle": "{createPipe}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "pipes",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "file",
    "name": "src/utils/groupByChannel.js",
    "content": "import { DATA_PROP as defaultDataProp } from \"../constants\";\n\n/**\n * @method groupByChannel\n * Get a 2D data array organized by channel from an array of Samples\n *\n * @example from [{ ...s0 }, { ...s1 }, ...]\n * to [[c0 ...], [c1 ...], ...]\n *\n * @param {any} samplesBuffer array of samples\n * @param {any} channelDataByChannel\n * \n * Credit to Ken from Seattle's elegant transposition\n * http://www.codesuck.com/2012/02/transpose-javascript-array-in-one-line.html\n */\n\nexport const groupByChannel = (samplesBuffer, dataProp = defaultDataProp) =>\n  samplesBuffer[0][dataProp].map((_, channelIndex) =>\n    samplesBuffer.map(sample => sample[dataProp][channelIndex])\n  );\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/utils/groupByChannel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "groupByChannel",
    "memberof": "src/utils/groupByChannel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/groupByChannel.js~groupByChannel",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/utils/groupByChannel.js",
    "importStyle": "{groupByChannel}",
    "description": "",
    "examples": [
      "from [{ ...s0 }, { ...s1 }, ...]\nto [[c0 ...], [c1 ...], ...]"
    ],
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "groupByChannel\nGet a 2D data array organized by channel from an array of Samples"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "samplesBuffer",
        "description": "array of samples"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "channelDataByChannel",
        "description": "Credit to Ken from Seattle's elegant transposition\nhttp://www.codesuck.com/2012/02/transpose-javascript-array-in-one-line.html"
      }
    ],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "src/utils/index.js",
    "content": "export * from \"./average\";\nexport * from \"./createEEG\";\nexport * from \"./createMockStream\";\nexport * from \"./createPipe\";",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/utils/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "src/utils/zeroPad.js",
    "content": "/**\n * @method zeroPad\n * zeroPads inputs for FFTs of non base 2\n * @param Array<number> bufferedData, number fftLength\n * @returns Array<number>\n */\n\nexport const zeroPad = (buffer, fftLength) => {\n  if (fftLength > buffer.length) {\n    console.log(\"zeropadding: \", fftLength - buffer.length);\n    return buffer.concat(new Array(fftLength - buffer.length).fill(0));\n  }\n  return buffer;\n};\n",
    "static": true,
    "longname": "/home/dano/eeg-pipes/src/utils/zeroPad.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "zeroPad",
    "memberof": "src/utils/zeroPad.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/zeroPad.js~zeroPad",
    "access": "public",
    "export": true,
    "importPath": "eeg-pipes/src/utils/zeroPad.js",
    "importStyle": "{zeroPad}",
    "description": "",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "zeroPad\nzeroPads inputs for FFTs of non base 2"
      },
      {
        "tagName": "@returns",
        "tagValue": "Array<number>"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "Array<number>",
        "description": "bufferedData, number fftLength"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Array<number>"
    }
  },
  {
    "kind": "index",
    "content": "# EEG Pipes\n\nPipeable RxJS operators for working with EEG data in Node and the Browser\n\n## Usage\n\nBefore getting started, you'll need an observable of EEG data.\n\nThe following are some libraries that provide exactly that:\n\n* [OpenBCI Ganglion BLE (Browser)](https://github.com/alexcastillo/ganglion-ble)\n* [OpenBCI Cyton/Ganglion (Node)](https://github.com/alexcastillo/openbci-rx)\n* [Muse (Browser)](https://github.com/urish/muse-js)\n\nPipes can be added to an EEG observable of EEG data samples with the\nfollowing data structure:\n\n```js\n{\n  data: [Number, Number, Number, Number], // channels\n  timestamp: Date,\n  info?: {\n  \tsamplingRate?: Number,\n  \tchannelNames?: [String, String, String, String],\n  \t..\n  }\n};\n```\n\nIndividual samples of EEG data contain an array of values for each EEG channel as well as a timestamp. An additional info object containing metadata about the EEG stream such as sampling rate and channel names can also be included or added with the addInfo operator.\n\nWe can start by installing the library:\n\n```bash\nnpm install --save eeg-pipes\n```\n\nThen, importing the pipes from the library:\n\n```js\nimport { bufferFFT, alphaPower } from \"eeg-pipes\";\n```\n\nAnd adding them to the RxJS observable pipe operator:\n\n```js\neeg$\n  .pipe(bufferFFT({ bins: 256 }), alphaPower())\n  .subscribe(buffer => console.log(buffer));\n```\n\n## Pipes\n\n### Filtering (IIR)\n\nFilter pipes can be applied to both samples or buffers of samples. Filters are linear IIR filters using a digital biquad implementation.\n\n* lowpassFilter({ nbChannels, cutoffFrequency })\n* highpassFilter({ nbChannels, cutoffFrequency })\n* bandpassFilter({ nbChannels, cutoffFrequencies: [lowBound, highBound] })\n* notchFilter({ nbChannels, cutoffFrequency })\n\nOptional Parameters:  \n`characteristic`: 'butterworth' or 'bessel'. Default is butterworth characteristic because of its steeper cutoff  \n`order`: the number of 2nd order biquad filters applied to the signal. Default is 2.  \n`samplingRate`: should match the samplingRate of your EEG device. Default is 250\n\n### Frequency\n\n* bufferFFT({ bins, window, sampleRate })\n* alphaPower()\n* betaPower()\n* deltaPower()\n* gammaPower()\n* thetaPower()\n* averagePower()\n* sliceFFT([ min, max ])\n* powerByBand()\n\n#### Unit conversion\n\n* voltToMicrovolts({ useLog })\n\n#### Utility\n\n* epoch({ duration, interval, samplingRate })\n* bufferCount()\n* bufferTime()\n* bufferToEpoch({ samplingRate })\n* pickChannels({ channels: [c1, c2, c3] })\n* removeChannels({ channels: [c1, c2, c3] })\n* addInfo()\n\n### Coming soon\n\n#### Filtering\n\n* vertScaleFilter()\n* vertAgoFilter()\n* smoothFilter()\n* polarityFilter()\n* maxFrequencyFilter()\n\n## Data Structures\n\n### Sample\n\nThis is the simplest, core data structure for individual samples of EEG data. Samples have a data array containing a single reading from a number of different EEG electrodes along with a single timestamp. Samples can also contain optional other parameters added by the `addInfo` operator. The design for this comes directly from the discussion on the [EEG stream data models repo](https://github.com/NeuroJS/eeg-stream-data-model/issues/1).\n\n```js\n{\n    data: [Number, ..., Number], // length == nbChannels\n    timestamp: <Number>,\n    info?: {\n  \t  samplingRate?: Number,\n  \t  channelNames?: [String, String, String, String],\n  \t...\n  }\n}\n```\n\n### Epoch\n\nAn Epoch represents the EEG data that has been collected over a specific period of time. They can be produced by using either the `epoch` operator or by using a standard RxJS buffering operator such as `bufferTime` followed by the `bufferToEpoch` operator. Collecting data in this way is necessary for performing frequency-based analyses and, in many cases, will improve performance of filtering and other downstream operations. Epochs contain a 2D data array (channels x samples) and an info object that always includes samplingRate and startTime data so that the timestamps of individual samples can be derived. \n\n```js\n{\n    data: [\n        [Number, ... , Number], // length == duration\n        [Number, ... , Number]\n    ], // length == nbChannels\n    info: {\n        samplingRate: Number,\n        startTime: Number,\n        channelNames?: [String, ..., String ]\n    }\n}\n```\n\n### Power Spectral Density or PSD: Proposed Work in Progress\n\nA PSD represents the absolute power of different frequency bins in an Epoch of EEG data. PSDs are produced by applying the `fft` operator to Epochs or using the `bufferFFT` operator directly on a stream of EEG Samples. PSDs contain an array of frequencies and a corresponding array of spectral power at each of those frequencies, as well as an info object that contains samplingRate and startTime info similarly to Epochs.\n\n```js\n{\n    psd: [\n        [Number, ... , Number] // spectral power; length = freqs.length\n    ], // length = numChannels\n    freqs: [Number, ... , Number], // length = fftLength / 2\n    info: {\n        samplingRate: Number,\n        startTime: Number,\n        channelNames?: [String, ..., String ]\n    }\n}\n```",
    "longname": "/home/dano/eeg-pipes/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"eeg-pipes\",\n  \"description\": \"Lettable RxJS operators for working with EEG data in Node and the Browser\",\n  \"version\": \"2.0.3\",\n  \"main\": \"dist/eeg-pipes.umd.js\",\n  \"scripts\": {\n    \"build\": \"webpack --mode production\",\n    \"dev\": \"webpack --mode development\",\n    \"start\": \"webpack-dev-server\",\n    \"prepublishOnly\": \"npm run build\"\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"author\": \"Alex Castillo <alex@castillo.io>\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"eeg\",\n    \"openbci\",\n    \"neurojs\",\n    \"rxjs\",\n    \"cyton\",\n    \"ganglion\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:alexcastillo/eeg-pipes.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/alexcastillo/eeg-pipes/issues\"\n  },\n  \"dependencies\": {\n    \"dsp.js\": \"^1.0.1\",\n    \"fili\": \"^2.0.1\",\n    \"rxjs\": \"^5.5.2\"\n  },\n  \"devDependencies\": {\n    \"babel-core\": \"^6.26.0\",\n    \"babel-loader\": \"^7.1.2\",\n    \"babel-plugin-dynamic-import-webpack\": \"^1.0.2\",\n    \"babel-plugin-transform-object-rest-spread\": \"^6.26.0\",\n    \"babel-preset-env\": \"^1.6.1\",\n    \"csv-loader\": \"^2.1.1\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^4.18.1\",\n    \"webpack\": \"^4.1.1\",\n    \"webpack-cli\": \"^2.0.12\",\n    \"webpack-dev-server\": \"^2.11.1\",\n    \"webpack-node-externals\": \"^1.6.0\",\n    \"webpack-rxjs-externals\": \"^1.1.0\"\n  }\n}\n",
    "longname": "/home/dano/eeg-pipes/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]