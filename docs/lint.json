[
  {
    "name": "powerByBand",
    "filePath": "src/pipes/frequency/powerByBand.js",
    "lines": [
      {
        "lineNumber": 13,
        "line": "/**"
      },
      {
        "lineNumber": 14,
        "line": " * @method powerByBand"
      },
      {
        "lineNumber": 15,
        "line": " * Returns an object with average band powers for all the classic EEG bands."
      },
      {
        "lineNumber": 16,
        "line": " *"
      },
      {
        "lineNumber": 17,
        "line": " * @param {object} bands { [bandName]: range[min, max] }"
      },
      {
        "lineNumber": 18,
        "line": " * @returns {Observable} bands { [bandName]: bandPower }"
      },
      {
        "lineNumber": 19,
        "line": " */"
      },
      {
        "lineNumber": 20,
        "line": "export const powerByBand = ("
      }
    ],
    "codeParams": [
      "bands",
      "sampleRate"
    ],
    "docParams": [
      "bands"
    ]
  },
  {
    "name": "addInfo",
    "filePath": "src/pipes/utility/addInfo.js",
    "lines": [
      {
        "lineNumber": 15,
        "line": "/**"
      },
      {
        "lineNumber": 16,
        "line": " * @method addInfo"
      },
      {
        "lineNumber": 17,
        "line": " * Annotates stream with user-defined metadata. Can be applied to Samples or Chunks"
      },
      {
        "lineNumber": 18,
        "line": " * @example { samplingRate: 256, channelNames: [\"Af&\", \"Fp1\", \"Fp2\", \"Af8\"] }"
      },
      {
        "lineNumber": 19,
        "line": " *"
      },
      {
        "lineNumber": 20,
        "line": " * @param info"
      },
      {
        "lineNumber": 21,
        "line": " * @returns {Observable} Sample or Chunk"
      },
      {
        "lineNumber": 22,
        "line": " */"
      },
      {
        "lineNumber": 23,
        "line": "export const addInfo = (arg = {}) => source =>"
      }
    ],
    "codeParams": [
      "arg"
    ],
    "docParams": [
      "info"
    ]
  },
  {
    "name": "groupByChannel",
    "filePath": "src/utils/groupByChannel.js",
    "lines": [
      {
        "lineNumber": 2,
        "line": "/**"
      },
      {
        "lineNumber": 3,
        "line": " * @method groupByChannel"
      },
      {
        "lineNumber": 4,
        "line": " * Get a 2D data array organized by channel from an array of Samples"
      },
      {
        "lineNumber": 5,
        "line": " *"
      },
      {
        "lineNumber": 6,
        "line": " * @example from [{ ...s0 }, { ...s1 }, ...]"
      },
      {
        "lineNumber": 7,
        "line": " * to [[c0 ...], [c1 ...], ...]"
      },
      {
        "lineNumber": 8,
        "line": " *"
      },
      {
        "lineNumber": 9,
        "line": " * @param {any} samplesBuffer array of samples"
      },
      {
        "lineNumber": 10,
        "line": " * @param {any} channelDataByChannel"
      },
      {
        "lineNumber": 11,
        "line": " * "
      },
      {
        "lineNumber": 12,
        "line": " * Credit to Ken from Seattle's elegant transposition"
      },
      {
        "lineNumber": 13,
        "line": " * http://www.codesuck.com/2012/02/transpose-javascript-array-in-one-line.html"
      },
      {
        "lineNumber": 14,
        "line": " */"
      },
      {
        "lineNumber": 15,
        "line": ""
      },
      {
        "lineNumber": 16,
        "line": "export const groupByChannel = (samplesBuffer, dataProp = defaultDataProp) =>"
      }
    ],
    "codeParams": [
      "samplesBuffer",
      "dataProp"
    ],
    "docParams": [
      "samplesBuffer",
      "channelDataByChannel"
    ]
  },
  {
    "name": "zeroPad",
    "filePath": "src/utils/zeroPad.js",
    "lines": [
      {
        "lineNumber": 0,
        "line": "/**"
      },
      {
        "lineNumber": 1,
        "line": " * @method zeroPad"
      },
      {
        "lineNumber": 2,
        "line": " * zeroPads inputs for FFTs of non base 2"
      },
      {
        "lineNumber": 3,
        "line": " * @param Array<number> bufferedData, number fftLength"
      },
      {
        "lineNumber": 4,
        "line": " * @returns Array<number>"
      },
      {
        "lineNumber": 5,
        "line": " */"
      },
      {
        "lineNumber": 6,
        "line": ""
      },
      {
        "lineNumber": 7,
        "line": "export const zeroPad = (buffer, fftLength) => {"
      }
    ],
    "codeParams": [
      "buffer",
      "fftLength"
    ],
    "docParams": [
      "Array<number>"
    ]
  }
]